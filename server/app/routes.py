"""Module for creating FastAPI application 'Fake Twitter'."""

from asyncio import run as async_run
from contextlib import asynccontextmanager
from typing import Annotated, Callable, Union

from fastapi import FastAPI, Form, Header, Request, Response, UploadFile
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.requests import Request as StarletteRequest
from typing_extensions import AsyncGenerator

from database import User, close_db_connection, init_db
from models import HandleEndpoint
from project_logger import fake_twitter_logger
from schemas import (
    AddMediaOut,
    AddTweetIn,
    AddTweetOut,
    ErrorResponse,
    SuccessResponse,
    TweetFeedOut,
    UserProfileDetailsOut,
)

unauthorized_message = {
    "result": False,
    "error_type": "Unauthorized",
    "error_message": "You don't have permission to visit website!",
}


async def get_fake_twitter_app() -> FastAPI:
    """Create FastAPI application 'Fake Twitter'.

    Returns:
        FastAPI: application
    """
    @asynccontextmanager
    async def lifespan(app: Callable) -> AsyncGenerator:
        """Init db before starting app and close db connection before stopping.

        Args:
            app (Callable): FastApi application

        Yields:
            AsyncGenerator: asynchronous generator

        """
        fake_twitter_logger.info("Started lifespan")

        # await init_db()
        yield
        # await close_db_connection()

    app = FastAPI(title="fake_twitter", lifespan=lifespan)

    @app.middleware("http")
    async def intercept_request(
        request: Request, call_next: Callable,
    ) -> Response:
        """Middleware for catching all incoming requests.

        Check that request headers contain 'api-key' header and  its has
        permission to access the application.

        Args:
            request (Request): incoming request
            call_next (Callable): pass request to corresponding path operation

        Returns:
            Response: response generated by the corresponding path operation.

        """
        api_key = request.headers.get("api-key")
        fake_twitter_logger.info(f"Checking permission for user: {api_key=}")
        if api_key and await User.is_existed_user_name(api_key):
            fake_twitter_logger.info("Access granted!")
            return await call_next(request)
        fake_twitter_logger.info("Access denied!")
        return JSONResponse(content=unauthorized_message, status_code=401)

    @app.exception_handler(StarletteHTTPException)
    async def http_exception_handler(
        request: StarletteRequest, exc: StarletteHTTPException,
    ) -> JSONResponse:
        """Catch HTTP exceptions and return custom user's response.

        Args:
            request (StarletteRequest): incoming request
            exc (StarletteHTTPException): exception

        Returns:
            JSONResponse: custom user's response

        """
        fake_twitter_logger.info(f"Caught exception: {exc}")
        return JSONResponse(
            content=jsonable_encoder(
                {
                    "result": False,
                    "error_type": "HTTPException",
                    "error_message": exc.detail,
                },
            ),
            status_code=exc.status_code,
        )

    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(
        request: StarletteRequest, exc: RequestValidationError,
    ) -> JSONResponse:
        """Validate incoming request.

        Args:
            request (StarletteRequest): incoming request
            exc (RequestValidationError): exception

        Returns:
            JSONResponse: custom user's response

        """
        fake_twitter_logger.info(f"Caught exception: {exc}")
        return JSONResponse(
            content=jsonable_encoder(
                {
                    "result": False,
                    "error_type": "Bad Request",
                    "error_message": str(exc.errors()),
                },
            ),
            status_code=400,
        )

    @app.post(
        path="/api/tweets",
        description="Add tweet",
        responses={
            201: {"description": "Created", "model": AddTweetOut},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def add_tweet(
        new_tweet: AddTweetIn,
        api_key: Annotated[str, Header()],
        response: Response,
    ) -> Union[AddTweetOut, ErrorResponse]:
        """Endpoint for adding new tweet.

        Call handler, then set http status code and return response.

        Args:
            new_tweet (AddTweetIn): tweet details
            api_key (str): author of tweet
            response (Response): fastapi response model for endpoint

        Returns:
            Union[AddTweetOut, ErrorResponse]: success adding tweet or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {new_tweet=}")
        details, http_code = await HandleEndpoint.add_tweet(api_key, new_tweet)
        fake_twitter_logger.info(f"{details=}, {http_code=}")
        response.status_code = http_code
        return AddTweetOut(**details)

    @app.post(
        path="/api/medias",
        description="Add media file",
        responses={
            201: {"description": "Created", "model": AddMediaOut},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def add_media_file(
        file: Annotated[UploadFile, Form()],
        api_key: Annotated[str, Header()],
        response: Response,
    ) -> Union[AddMediaOut, ErrorResponse]:
        """Endpoint for adding media file.

        Call handler, then set http status code and return response.

        Args:
            file (UploadFile): media file
            api_key (str): username who adding media_file
            response (Response): fastapi response model for endpoint

        Returns:
            Union[AddMediaOut, ErrorResponse]: success adding media or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=}, {file.filename=}")
        details, http_code = await HandleEndpoint.add_media_file(
            api_key, file,
        )
        fake_twitter_logger.info(f"{details=}, {http_code=}")
        response.status_code = http_code
        if http_code == 201:
            return AddMediaOut(**details)
        return ErrorResponse(**details)

    @app.delete(
        path="/api/tweets/{id}",
        description="Delete tweet by id",
        responses={
            200: {"description": "OK", "model": SuccessResponse},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
            403: {"description": "Forbidden", "model": ErrorResponse},
        },
    )
    async def delete_tweet(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[SuccessResponse, ErrorResponse]:
        """Endpoint for deleting tweet.

        Call handler, then set http status code and return response.

        Args:
            id (int): tweet id
            api_key (str): username who wants to delete tweet
            response (Response): fastapi response model for endpoint

        Returns:
            Union[SuccessResponse, ErrorResponse]: success deleting tweet or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {id=}")
        error_msg, http_code = await HandleEndpoint.delete_tweet(
            api_key, id,
        )
        fake_twitter_logger.info(f"{error_msg=}, {http_code=}")
        response.status_code = http_code
        if error_msg:
            return ErrorResponse(**error_msg)
        return SuccessResponse()

    @app.post(
        path="/api/tweets/{id}/likes",
        description="Like tweet by id",
        responses={
            201: {"description": "OK", "model": SuccessResponse},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def like_tweet_by_id(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[SuccessResponse, ErrorResponse]:
        """Endpoint to like tweet by its id.

        Call handler, then set http status code and return response.

        Args:
            id (int): tweet id
            api_key (str): username who liking tweet
            response (Response): fastapi response model for endpoint

        Returns:
            Union[SuccessResponse, ErrorResponse]: success like tweet or error
                message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {id=}")
        error_msg, http_code = await HandleEndpoint.like_tweet_by_id(
            api_key, id,
        )
        fake_twitter_logger.info(f"{error_msg=}, {http_code=}")
        response.status_code = http_code
        if error_msg:
            return ErrorResponse(**error_msg)
        return SuccessResponse()

    @app.delete(
        path="/api/tweets/{id}/likes",
        description="Dislike tweet by id",
        responses={
            201: {"description": "OK", "model": SuccessResponse},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def dislike_tweet_by_id(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[SuccessResponse, ErrorResponse]:
        """Endpoint to dislike tweet by its id.

        Call handler, then set http status code and return response.

        Args:
            id (int): tweet id
            api_key (str): username who disliking tweet
            response (Response): fastapi response model for endpoint

        Returns:
            Union[SuccessResponse, ErrorResponse]: success dislike tweet or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {id=}")
        error_msg, http_code = await HandleEndpoint.dislike_tweet_by_id(
            api_key, id,
        )
        fake_twitter_logger.info(f"{error_msg=}, {http_code=}")
        response.status_code = http_code
        if error_msg:
            return ErrorResponse(**error_msg)
        return SuccessResponse()

    @app.post(
        path="/api/users/{id}/follow",
        description="Follow user by id",
        responses={
            201: {"description": "OK", "model": SuccessResponse},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def follow_other_user(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[SuccessResponse, ErrorResponse]:
        """Endpoint for adding followed user 'id' to user 'api_key'.

        Call handler, then set http status code and return response.

        Args:
            id (int): followed user id
            api_key (str): username whom to add followed user
            response (Response): fastapi response model for endpoint

        Returns:
            Union[SuccessResponse, ErrorResponse]: success adding followed user
                or error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {id=}")
        error_msg, http_code = await HandleEndpoint.follow_other_user(
            api_key, id,
        )
        fake_twitter_logger.info(f"{error_msg=}, {http_code=}")
        response.status_code = http_code
        if error_msg:
            return ErrorResponse(**error_msg)
        return SuccessResponse()

    @app.delete(
        path="/api/users/{id}/follow",
        description="Unsubscribe from user by id",
        responses={
            201: {"description": "OK", "model": SuccessResponse},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def unfollow_user(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[SuccessResponse, ErrorResponse]:
        """Endpoint to unfollow user 'id' for user 'api_key'.

        Call handler, then set http status code and return response.

        Args:
            id (int): followed user id
            api_key (str): username who wants to unfollow
            response (Response): fastapi response model for endpoint

        Returns:
            Union[SuccessResponse, ErrorResponse]: success unfollow user or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=} | {id=}")
        error_msg, http_code = await HandleEndpoint.unfollow_user(
            api_key, id,
        )
        fake_twitter_logger.info(f"{error_msg=}, {http_code=}")
        response.status_code = http_code
        if error_msg:
            return ErrorResponse(**error_msg)
        return SuccessResponse()

    @app.get(
        path="/api/tweets",
        description="Tweet feed for user",
        responses={
            200: {"description": "OK", "model": TweetFeedOut},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def get_tweet_feed(
        api_key: Annotated[str, Header()], response: Response,
    ) -> Union[TweetFeedOut, ErrorResponse]:
        """Endpoint to get full tweet feed.

        Call handler, then set http status code and return response.

        Args:
            api_key (str): username who request full tweet feed
            response (Response): fastapi response model for endpoint

        Returns:
            Union[TweetFeedOut, ErrorResponse]: success get tweet feeed or
                error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=}")
        # data, http_code = await HandleEndpoint.get_user_tweet_feed(api_key)
        tweet_feed, http_code = await HandleEndpoint.get_full_tweet_feed()
        fake_twitter_logger.info(f"{tweet_feed=}, {http_code=}")
        response.status_code = http_code
        return TweetFeedOut(**tweet_feed)

    @app.get(
        path="/api/users/me",
        description="User own profile details",
        responses={
            200: {"description": "OK", "model": UserProfileDetailsOut},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def get_own_profile_details(
        api_key: Annotated[str, Header()], response: Response,
    ) -> Union[UserProfileDetailsOut, ErrorResponse]:
        """Endpoint to get own profile.

        Call handler, then set http status code and return response.

        Args:
            api_key (str): username who request own profile
            response (Response): fastapi response model for endpoint

        Returns:
            Union[UserProfileDetailsOut, ErrorResponse]: success get own
            profile or error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=}")
        details, http_code = await HandleEndpoint.get_own_profile(
            api_key,
        )
        fake_twitter_logger.info(f"{details=}, {http_code=}")
        response.status_code = http_code
        if http_code == 200:
            return UserProfileDetailsOut(**details)
        return ErrorResponse(**details)

    @app.get(
        path="/api/users/{id}",
        description="Get user profile details by id",
        responses={
            200: {"description": "OK", "model": UserProfileDetailsOut},
            400: {"description": "Bad Request", "model": ErrorResponse},
            401: {"description": "Unauthorized", "model": ErrorResponse},
        },
    )
    async def get_user_profile_details(
        id: int, api_key: Annotated[str, Header()], response: Response,
    ) -> Union[UserProfileDetailsOut, ErrorResponse]:
        """Endpoint to get user profile.

        Call handler, then set http status code and return response.

        Args:
            id (int): user id whose profile is required
            api_key (str): username who requests user profile
            response (Response): fastapi response model for endpoint

        Returns:
            Union[UserProfileDetailsOut, ErrorResponse]: success get user
            profile or error message with corresponding http status code.

        """
        fake_twitter_logger.info(f"{api_key=}")
        details, http_code = await HandleEndpoint.get_user_profile(id)
        fake_twitter_logger.info(f"{details=}, {http_code=}")
        response.status_code = http_code
        if http_code == 200:
            return UserProfileDetailsOut(**details)
        return ErrorResponse(**details)

    return app


application = async_run(get_fake_twitter_app())
