"""Module for creating FastAPI application 'Junior Twitter Clone'."""

from asyncio import run as async_run
from contextlib import asynccontextmanager
from typing import Callable

from fastapi import FastAPI, Request, Response
from fastapi.encoders import jsonable_encoder
from fastapi.exceptions import RequestValidationError
from fastapi.responses import JSONResponse
from starlette.exceptions import HTTPException as StarletteHTTPException
from starlette.requests import Request as StarletteRequest
from typing_extensions import AsyncGenerator

from app.models.users import User
from models.connection import close_db_connection
from models.initialization import init_db
from project_logger import project_logger
from routes import api_medias, api_users, api_tweets
from schemas import Settings

open_api_urls = (
    "http://localhost/docs",
    "http://127.0.0.1/docs",
    "http://localhost/openapi.json",
    "http://127.0.0.1/openapi.json",
)
unauthorized_message = {
    "result": False,
    "error_type": "Unauthorized",
    "error_message": "You don't have permission to visit website!",
}


async def get_junior_twitter_clone() -> FastAPI:
    """Create FastAPI application 'Junior Twitter Clone'.

    Returns:
        FastAPI: application
    """
    @asynccontextmanager
    async def lifespan(app: Callable) -> AsyncGenerator:
        """Before starting and stopping app logic.

        Check os environ additional parameters and init db before starting app
        and close db connection before stopping it.

        Args:
            app (Callable): FastApi application

        Yields:
            AsyncGenerator: asynchronous generator

        """
        project_logger.info("Started lifespan")
        project_settings = Settings()
        await init_db()
        yield
        await close_db_connection()

    app = FastAPI(title="junior_twitter_clone", lifespan=lifespan)
    for api_router in (api_medias, api_users, api_tweets):
        app.include_router(api_router.router)

    @app.middleware("http")
    async def intercept_request(
        request: Request, call_next: Callable,
    ) -> Response:
        """Middleware for catching all incoming requests.

        Grant permission to access the application if request url in
        'open_api_urls' or request contain header 'api-key' which is register
        in db, table 'users'. Else return response with error details.

        Args:
            request (Request): incoming request
            call_next (Callable): pass request to corresponding path operation

        Returns:
            Response: response generated by the corresponding path operation.

        """
        api_key = request.headers.get("api-key")
        request_url = request.url
        project_logger.info(f"Checking permission: {request.url=}, {api_key=}")
        if (
            request_url in open_api_urls or
            (api_key and await User.is_existed_user_name(api_key))
        ):
            project_logger.info("Access granted!")
            return await call_next(request)
        project_logger.info("Access denied!")
        return JSONResponse(content=unauthorized_message, status_code=401)

    @app.exception_handler(StarletteHTTPException)
    async def http_exception_handler(
        request: StarletteRequest, exc: StarletteHTTPException,
    ) -> JSONResponse:
        """Catch HTTP exceptions and return custom user's response.

        Args:
            request (StarletteRequest): incoming request
            exc (StarletteHTTPException): exception

        Returns:
            JSONResponse: custom user's response

        """
        project_logger.info(f"Caught exception: {exc}")
        return JSONResponse(
            content=jsonable_encoder(
                {
                    "result": False,
                    "error_type": "HTTPException",
                    "error_message": exc.detail,
                },
            ),
            status_code=exc.status_code,
        )

    @app.exception_handler(RequestValidationError)
    async def validation_exception_handler(
        request: StarletteRequest, exc: RequestValidationError,
    ) -> JSONResponse:
        """Validate incoming request.

        Args:
            request (StarletteRequest): incoming request
            exc (RequestValidationError): exception

        Returns:
            JSONResponse: custom user's response

        """
        project_logger.info(f"Caught exception: {exc}")
        return JSONResponse(
            content=jsonable_encoder(
                {
                    "result": False,
                    "error_type": "Bad Request",
                    "error_message": str(exc.errors()),
                },
            ),
            status_code=400,
        )

    return app


application = async_run(get_junior_twitter_clone())
